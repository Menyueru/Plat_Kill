<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BEPUutilities</name>
    </assembly>
    <members>
        <member name="T:BEPUutilities.AffineTransform">
            <summary>
             A transformation composed of a linear transformation and a translation.
            </summary>
        </member>
        <member name="F:BEPUutilities.AffineTransform.Translation">
            <summary>
             Translation in the affine transform.
            </summary>
        </member>
        <member name="F:BEPUutilities.AffineTransform.LinearTransform">
            <summary>
            Linear transform in the affine transform.
            </summary>
        </member>
        <member name="M:BEPUutilities.AffineTransform.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="translation">Translation to use in the transform.</param>
        </member>
        <member name="M:BEPUutilities.AffineTransform.#ctor(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Vector3)">
            <summary>
             Constructs a new affine tranform.
            </summary>
            <param name="orientation">Orientation to use as the linear transform.</param>
            <param name="translation">Translation to use in the transform.</param>
        </member>
        <member name="M:BEPUutilities.AffineTransform.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Vector3)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="scaling">Scaling to apply in the linear transform.</param>
            <param name="orientation">Orientation to apply in the linear transform.</param>
            <param name="translation">Translation to apply.</param>
        </member>
        <member name="M:BEPUutilities.AffineTransform.#ctor(BEPUutilities.Matrix3x3,Microsoft.Xna.Framework.Vector3)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="linearTransform">The linear transform component.</param>
            <param name="translation">Translation component of the transform.</param>
        </member>
        <member name="M:BEPUutilities.AffineTransform.Transform(Microsoft.Xna.Framework.Vector3@,BEPUutilities.AffineTransform@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
             Transforms a vector by an affine transform.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to apply.</param>
            <param name="transformed">Transformed position.</param>
        </member>
        <member name="M:BEPUutilities.AffineTransform.TransformInverse(Microsoft.Xna.Framework.Vector3@,BEPUutilities.AffineTransform@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
             Transforms a vector by an affine transform's inverse.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to invert and apply.</param>
            <param name="transformed">Transformed position.</param>
        </member>
        <member name="M:BEPUutilities.AffineTransform.Invert(BEPUutilities.AffineTransform@,BEPUutilities.AffineTransform@)">
            <summary>
             Inverts an affine transform.
            </summary>
            <param name="transform">Transform to invert.</param>
             <param name="inverse">Inverse of the transform.</param>
        </member>
        <member name="M:BEPUutilities.AffineTransform.Multiply(BEPUutilities.AffineTransform@,BEPUutilities.AffineTransform@,BEPUutilities.AffineTransform@)">
            <summary>
            Multiplies a transform by another transform.
            </summary>
            <param name="a">First transform.</param>
            <param name="b">Second transform.</param>
            <param name="transform">Combined transform.</param>
        </member>
        <member name="M:BEPUutilities.AffineTransform.Multiply(BEPUutilities.RigidTransform@,BEPUutilities.AffineTransform@,BEPUutilities.AffineTransform@)">
            <summary>
             Multiplies a rigid transform by an affine transform.
            </summary>
            <param name="a">Rigid transform.</param>
            <param name="b">Affine transform.</param>
            <param name="transform">Combined transform.</param>
        </member>
        <member name="M:BEPUutilities.AffineTransform.Transform(Microsoft.Xna.Framework.Vector3,BEPUutilities.AffineTransform)">
            <summary>
             Transforms a vector using an affine transform.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="affineTransform">Transform to apply.</param>
            <returns>Transformed position.</returns>
        </member>
        <member name="M:BEPUutilities.AffineTransform.CreateFromRigidTransform(BEPUutilities.RigidTransform@,BEPUutilities.AffineTransform@)">
            <summary>
            Creates an affine transform from a rigid transform.
            </summary>
            <param name="rigid">Rigid transform to base the affine transform on.</param>
            <param name="affine">Affine transform created from the rigid transform.</param>
        </member>
        <member name="M:BEPUutilities.AffineTransform.CreateFromRigidTransform(BEPUutilities.RigidTransform)">
            <summary>
            Creates an affine transform from a rigid transform.
            </summary>
            <param name="rigid">Rigid transform to base the affine transform on.</param>
            <returns>Affine transform created from the rigid transform.</returns>
        </member>
        <member name="P:BEPUutilities.AffineTransform.Matrix">
            <summary>
             Gets or sets the 4x4 matrix representation of the affine transform.
             The linear transform is the upper left 3x3 part of the 4x4 matrix.
             The translation is included in the matrix's Translation property.
            </summary>
        </member>
        <member name="P:BEPUutilities.AffineTransform.Identity">
            <summary>
             Gets the identity affine transform.
            </summary>
        </member>
        <member name="T:BEPUutilities.ConvexHullHelper">
            <summary>
            Processes vertex data into convex hulls.
            </summary>
        </member>
        <member name="M:BEPUutilities.ConvexHullHelper.GetConvexHull(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Identifies the indices of points in a set which are on the outer convex hull of the set.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="indices">List of indices composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
        </member>
        <member name="M:BEPUutilities.ConvexHullHelper.GetConvexHull(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:BEPUutilities.ConvexHullHelper.GetConvexHull(BEPUutilities.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:BEPUutilities.ConvexHullHelper.GetConvexHull(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputIndices">List of indices composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:BEPUutilities.ConvexHullHelper.GetConvexHull(BEPUutilities.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},BEPUutilities.DataStructures.RawList{System.Int32},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputTriangleIndices">List of indices composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:BEPUutilities.ConvexHullHelper.GetConvexHull(BEPUutilities.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},BEPUutilities.DataStructures.RawList{System.Int32})">
            <summary>
            Identifies the indices of points in a set which are on the outer convex hull of the set.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputTriangleIndices">List of indices composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
        </member>
        <member name="F:BEPUutilities.ConvexHullHelper.BlockedCellSets">
            <summary>
            Contains and manufactures cell sets used by the redundant point remover.  To minimize memory usage, this can be cleared
            after using the RemoveRedundantPoints if it isn't going to be used again.
            </summary>
        </member>
        <member name="M:BEPUutilities.ConvexHullHelper.RemoveRedundantPoints(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell of size 0.001.
            </summary>
            <param name="points">List of points to prune.</param>
        </member>
        <member name="M:BEPUutilities.ConvexHullHelper.RemoveRedundantPoints(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Double)">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell.
            </summary>
            <param name="points">List of points to prune.</param>
            <param name="cellSize">Size of cells to determine redundancy.</param>
        </member>
        <member name="M:BEPUutilities.ConvexHullHelper.RemoveRedundantPoints(BEPUutilities.DataStructures.RawList{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell of size 0.001.
            </summary>
            <param name="points">List of points to prune.</param>
        </member>
        <member name="M:BEPUutilities.ConvexHullHelper.RemoveRedundantPoints(BEPUutilities.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},System.Double)">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell.
            </summary>
            <param name="points">List of points to prune.</param>
            <param name="cellSize">Size of cells to determine redundancy.</param>
        </member>
        <member name="T:BEPUutilities.ConvexHullHelper.BlockedCell">
            <summary>
            Represents a cell in space which is already occupied by a point.  Any other points which resolve to the same cell are considered redundant.
            </summary>
        </member>
        <member name="T:BEPUutilities.DataStructures.ConcurrentDeque`1">
            <summary>
            Locked queue supporting dequeues from both ends.
            </summary>
            <typeparam name="T">Type of contained elements.</typeparam>
        </member>
        <member name="M:BEPUutilities.DataStructures.ConcurrentDeque`1.Enqueue(`0)">
            <summary>
            Enqueues an element to the tail of the queue with locking.
            </summary>
            <param name="item">Dequeued element, if any.</param>
            <returns>True if an element could be dequeued, false otherwise.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.ConcurrentDeque`1.TryDequeueFirst(`0@)">
            <summary>
            Tries to dequeue the first element of the queue with locking.
            </summary>
            <param name="item">Dequeued element, if any.</param>
            <returns>True if an element could be dequeued, false otherwise.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.ConcurrentDeque`1.TryDequeueLast(`0@)">
            <summary>
            Tries to dequeue the last element of the queue with locking.
            </summary>
            <param name="item">Dequeued element, if any.</param>
            <returns>True if an element could be dequeued, false otherwise.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.ConcurrentDeque`1.TryUnsafeDequeueFirst(`0@)">
            <summary>
            Tries to dequeue the first element of the queue without locking.
            </summary>
            <param name="item">Dequeued element, if any.</param>
            <returns>True if an element could be dequeued, false otherwise.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.ConcurrentDeque`1.TryUnsafeDequeueLast(`0@)">
            <summary>
            Tries to dequeue the last element of the queue without locking.
            </summary>
            <param name="item">Dequeued element, if any.</param>
            <returns>True if an element could be dequeued, false otherwise.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.ConcurrentDeque`1.UnsafeEnqueue(`0)">
            <summary>
            Enqueues an element onto the tail of the deque without locking.
            </summary>
            <param name="item">Element to enqueue.</param>
        </member>
        <member name="P:BEPUutilities.DataStructures.ConcurrentDeque`1.Count">
            <summary>
            Number of elements in the deque.
            </summary>
        </member>
        <member name="T:BEPUutilities.DataStructures.ObservableDictionary`2">
            <summary>
             Dictionary that provides events when the inner dictionary is changed.
            </summary>
            <typeparam name="TKey">Type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">Type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableDictionary`2.#ctor">
            <summary>
            Constructs a new observable dictionary.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableDictionary`2.Add(`0,`1)">
            <summary>
             Adds a pair to the dictionary.
            </summary>
            <param name="key">Key of the element.</param>
            <param name="value">Value of the element.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableDictionary`2.Remove(`0)">
            <summary>
             Removes a key and its associated value from the dictionary, if present.
            </summary>
            <param name="key">Key of the element to remove.</param>
            <returns>Whether or not the object was found.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableDictionary`2.Clear">
            <summary>
             Clears the dictionary of all elements.
            </summary>
        </member>
        <member name="P:BEPUutilities.DataStructures.ObservableDictionary`2.WrappedDictionary">
            <summary>
             Gets or sets the dictionary wrapped by the observable dictionary.
             While the inner dictionary can be changed, making modifications to it will
             not trigger any changed events.
            </summary>
        </member>
        <member name="E:BEPUutilities.DataStructures.ObservableDictionary`2.Changed">
            <summary>
             Fires when the dictionary's elements are changed using the wrapping functions.
            </summary>
        </member>
        <member name="T:BEPUutilities.DataStructures.ObservableList`1">
            <summary>
             List of objects which fires events when it is changed.
            </summary>
            <typeparam name="T">Type of elements in the list.</typeparam>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
             Constructs a new observable list.
            </summary>
            <param name="list">List to copy into the internal wrapped list.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.#ctor">
            <summary>
             Constructs an empty observable list.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.#ctor(System.Int32)">
            <summary>
             Constructs an empty observable list with a given capacity.
            </summary>
            <param name="initialCapacity">Initial allocated storage in the list.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.ObservableList`1.GetEnumerator">
            <summary>
             Gets an enumerator for the list.
            </summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="P:BEPUutilities.DataStructures.ObservableList`1.WrappedList">
            <summary>
            Gets the list wrapped by the observable list. Adds and removes made to this list directly will not trigger events.
            </summary>
        </member>
        <member name="E:BEPUutilities.DataStructures.ObservableList`1.Changed">
            <summary>
             Fires when elements in the list are changed.
            </summary>
        </member>
        <member name="P:BEPUutilities.DataStructures.ObservableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="P:BEPUutilities.DataStructures.ObservableList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="T:BEPUutilities.DataStructures.RawList`1">
            <summary>
             No-frills list that wraps an accessible array.
            </summary>
            <typeparam name="T">Type of elements contained by the list.</typeparam>
        </member>
        <member name="F:BEPUutilities.DataStructures.RawList`1.Elements">
            <summary>
             Direct access to the elements owned by the raw list.
             Be careful about the operations performed on this list;
             use the normal access methods if in doubt.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.#ctor">
            <summary>
             Constructs an empty list.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.#ctor(System.Int32)">
            <summary>
             Constructs an empty list.
            </summary>
            <param name="initialCapacity">Initial capacity to allocate for the list.</param>
            <exception cref="T:System.ArgumentException">Thrown when the initial capacity is zero or negative.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
             Constructs a raw list from another list.
            </summary>
            <param name="elements">List to copy.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the list.
            </summary>
            <param name="index">Index of the element to remove.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.FastRemoveAt(System.Int32)">
            <summary>
            Removes an element from the list without maintaining order.
            </summary>
            <param name="index">Index of the element to remove.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.AddRange(BEPUutilities.DataStructures.RawList{`0})">
            <summary>
             Adds a range of elements to the list from another list.
            </summary>
            <param name="items">Elements to add.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.AddRange(System.Collections.Generic.List{`0})">
            <summary>
             Adds a range of elements to the list from another list.
            </summary>
            <param name="items">Elements to add.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.AddRange(System.Collections.Generic.IList{`0})">
            <summary>
             Adds a range of elements to the list from another list.
            </summary>
            <param name="items">Elements to add.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.FastRemove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection without maintaining element order.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.ToArray">
            <summary>
            Copies the elements from the list into an array.
            </summary>
            <returns>An array containing the elements in the list.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the element at the specified index.
            </summary>
            <param name="index">Index to insert the item.</param>
            <param name="item">Element to insert.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.FastInsert(System.Int32,`0)">
            <summary>
            Inserts the element at the specified index without maintaining list order.
            </summary>
            <param name="index">Index to insert the item.</param>
            <param name="item">Element to insert.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.Contains(`0)">
            <summary>
            Determines if an item is present in the list.
            </summary>
            <param name="item">Item to be tested.</param>
            <returns>Whether or not the item was contained by the list.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list's contents to the array.
            </summary>
            <param name="array">Array to receive the list's contents.</param>
            <param name="arrayIndex">Index in the array to start the dump.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.GetEnumerator">
            <summary>
             Gets an enumerator for the list.
            </summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the list.
            </summary>
            <param name="comparer">Comparer to use to sort the list.</param>
        </member>
        <member name="P:BEPUutilities.DataStructures.RawList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            Can also be set; setting the count is a direct change to the count integer and does not change the state of the array.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:BEPUutilities.DataStructures.RawList`1.Capacity">
            <summary>
             Gets or sets the current size allocated for the list.
            </summary>
        </member>
        <member name="P:BEPUutilities.DataStructures.RawList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element of the list at the given index.
            </summary>
            <param name="index">Index in the list.</param>
            <returns>Element at the given index.</returns>
        </member>
        <member name="T:BEPUutilities.DataStructures.RawList`1.Enumerator">
            <summary>
             Enumerator for the RawList.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawList`1.Enumerator.#ctor(BEPUutilities.DataStructures.RawList{`0})">
            <summary>
             Constructs a new enumerator.
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:BEPUutilities.DataStructures.RawValueList`1">
            <summary>
             No-frills list used for value types that contain no reference types.
            </summary>
            <typeparam name="T">Type of the elements in the list.</typeparam>
        </member>
        <member name="F:BEPUutilities.DataStructures.RawValueList`1.Elements">
            <summary>
             Directly accessible array of elements in the list.
             Be careful about which operations are applied to the array;
             if in doubt, use the regular access methods.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawValueList`1.#ctor">
            <summary>
             Constructs an empty list.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawValueList`1.#ctor(System.Int32)">
            <summary>
             Constructs an empty list.
            </summary>
            <param name="initialCapacity">Initial capacity of the list.</param>
            <exception cref="T:System.ArgumentException">Thrown when the initial capcity is less than or equal to zero.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawValueList`1.RemoveAt(System.Int32)">
            <summary>
             Removes an element from the list.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is not present in the list.</exception>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawValueList`1.Add(`0@)">
            <summary>
             Adds an element to the list.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawValueList`1.Clear">
            <summary>
             Clears the list of all elements.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawValueList`1.Remove(`0@)">
            <summary>
             Removes an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item was present in the list.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.RawValueList`1.IndexOf(`0@)">
            <summary>
             Gets the index of an element in the list.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of the searched element.</returns>
        </member>
        <member name="P:BEPUutilities.DataStructures.RawValueList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            Can also be set; setting the count is a direct change to the count integer and does not change the state of the array.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:BEPUutilities.DataStructures.RawValueList`1.Capacity">
            <summary>
             Gets or sets the current size allocated for the list.
            </summary>
        </member>
        <member name="T:BEPUutilities.DataStructures.ReadOnlyDictionary`2">
            <summary>
             Wraps a dictionary in a read only collection.
            </summary>
            <typeparam name="TKey">Type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">Type of values in the dictionary.</typeparam>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructs a new read-only wrapper dictionary.
            </summary>
            <param name="dictionary">Internal dictionary to use.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            Gets an enumerator for key-value pairs in the dictionary.
            </summary>
            <returns>Enumerator for the dictionary.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for key-value pairs in the dictionary.
            </summary>
            <returns>Enumerator for the dictionary.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if the dictionary contains a key-value pair.
            </summary>
            <param name="item">Key-value pair to look for.</param>
            <returns>Whether or not the key-value pair is present.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if the dictionary contains a given key.
            </summary>
            <param name="key">Key to check for.</param>
            <returns>Whether or not the key is contained.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the key-value pairs of the dictionary into an array.
            </summary>
            <param name="array">Target array.</param>
            <param name="arrayIndex">The zero-based index at which copying begins.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to retrieve a value from the dictionary using a key.
            </summary>
            <param name="key">Key to look for.</param>
            <param name="value">Value associated with the key.</param>
            <returns>Whether or not the key exists.</returns>
        </member>
        <member name="P:BEPUutilities.DataStructures.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="P:BEPUutilities.DataStructures.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets whether or not this dictionary is read-only.
            </summary>
        </member>
        <member name="P:BEPUutilities.DataStructures.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the key in the dictionary.
            </summary>
            <param name="key">Key to look for in the dictionary.</param>
            <returns>Value associated with the key.</returns>
        </member>
        <member name="P:BEPUutilities.DataStructures.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an enumerable set of keys in the dictionary.
            </summary>
        </member>
        <member name="P:BEPUutilities.DataStructures.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an enumerable set of values in the dictionary.
            </summary>
        </member>
        <member name="T:BEPUutilities.DataStructures.ReadOnlyEnumerable`1">
            <summary>
             WRaps an enumerable in a temporary enumeration struct.
            </summary>
            <typeparam name="T">Type of the enumerable being iterated.</typeparam>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Constructs a new read only enumerable.
            </summary>
            <param name="enumerable">Enumerable to wrap.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:BEPUutilities.DataStructures.ReadOnlyList`1">
            <summary>
            Wraps a list in an enumerable struct.
            </summary>
            <typeparam name="T">Type contained by the list.</typeparam>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructs a new read-only list.
            </summary>
            <param name="wrappedList">List wrapped by the read-only list.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:BEPUutilities.DataStructures.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="P:BEPUutilities.DataStructures.ReadOnlyList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="T:BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator">
            <summary>
            Enumerates the read only list.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
             Constructs an enumerator.
            </summary>
            <param name="wrappedList">Collection to which the enumerator belongs.</param>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:BEPUutilities.DataStructures.TinyList`1">
            <summary>
            Special datatype used for heapless lists without unsafe/stackalloc.
            Designed for object types or reference-sized structs (int, float...).
            Stores a maximum of 8 entries.
            </summary>
            <typeparam name="T">Struct type to use.</typeparam>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyList`1.ToString">
            <summary>
            Creates a string representation of the list.
            </summary>
            <returns>String representation of the list.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyList`1.Add(`0)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be added.
            Will return false when the list is full.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyList`1.IndexOf(`0)">
            <summary>
            Gets the index of the item in the list, if it is present.
            </summary>
            <param name="item">Item to look for.</param>
            <returns>Index of the item, if present.  -1 otherwise.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyList`1.Remove(`0)">
            <summary>
            Tries to remove an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item existed in the list.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <returns>Whether or not the item could be removed.
            Returns false if the index is out of bounds.</returns>
        </member>
        <member name="P:BEPUutilities.DataStructures.TinyList`1.Count">
            <summary>
            Gets the current number of elements in the list.
            </summary>
        </member>
        <member name="P:BEPUutilities.DataStructures.TinyList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">Index to retrieve.</param>
            <returns>Retrieved item.</returns>
        </member>
        <member name="T:BEPUutilities.DataStructures.TinyStructList`1">
            <summary>
            Special datatype used for heapless lists without unsafe/stackalloc.
            Since reference types would require heap-side allocation and
            do not match well with this structure's ref-parameter based access,
            only structs are allowed.
            Stores a maximum of 8 entries.
            </summary>
            <typeparam name="T">Struct type to use.</typeparam>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyStructList`1.ToString">
            <summary>
            Creates a string representation of the list.
            </summary>
            <returns>String representation of the list.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyStructList`1.Add(`0@)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be added.
            Will return false when the list is full.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyStructList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyStructList`1.Get(System.Int32,`0@)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">Index to retrieve.</param>
            <param name="item">Retrieved item.</param>
            <returns>Whether or not the index was valid.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyStructList`1.IndexOf(`0@)">
            <summary>
            Gets the index of the item in the list, if it is present.
            </summary>
            <param name="item">Item to look for.</param>
            <returns>Index of the item, if present.  -1 otherwise.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyStructList`1.Remove(`0@)">
            <summary>
            Tries to remove an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item existed in the list.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyStructList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <returns>Whether or not the item could be removed.
            Returns false if the index is out of bounds.</returns>
        </member>
        <member name="M:BEPUutilities.DataStructures.TinyStructList`1.Replace(System.Int32,`0@)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="index">Index to replace.</param>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be replaced.
            Returns false if the index is invalid.</returns>
        </member>
        <member name="P:BEPUutilities.DataStructures.TinyStructList`1.Count">
            <summary>
            Gets the current number of elements in the list.
            </summary>
        </member>
        <member name="T:BEPUutilities.MathChecker">
            <summary>
            Contains conditional extensions to check for bad values in various structures.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.IsInvalid(System.Single)">
            <summary>
            Checks a single float for validity.  Separate from the extension method to avoid throwing exceptions deep in a call tree.
            </summary>
            <param name="f">Value to validate.</param>
            <returns>True if the value is invalid, false if it is valid.</returns>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(System.Single)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(BEPUutilities.Matrix2x2)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(BEPUutilities.Matrix3x2)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(BEPUutilities.Matrix2x3)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(BEPUutilities.Matrix3x3)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(BEPUutilities.RigidTransform)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(BEPUutilities.AffineTransform)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUutilities.MathChecker.Validate(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="T:BEPUutilities.Matrix2x2">
            <summary>
            2 row, 2 column matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix2x2.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix2x2.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix2x2.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix2x2.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 2 row, 2 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Add(BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Add(Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Add(BEPUutilities.Matrix2x2@,Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix2x2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix2x2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.CreateScale(System.Single,BEPUutilities.Matrix2x2@)">
            <summary>
            Constructs a uniform scaling matrix.
            </summary>
            <param name="scale">Value to use in the diagonal.</param>
            <param name="matrix">Scaling matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Invert(BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@)">
            <summary>
            Inverts the given matix.
            </summary>
            <param name="matrix">Matrix to be inverted.</param>
            <param name="result">Inverted matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Multiply(BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Multiply(BEPUutilities.Matrix2x2@,Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix2x2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Multiply(Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Multiply(BEPUutilities.Matrix2x3@,BEPUutilities.Matrix3x2@,BEPUutilities.Matrix2x2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Negate(BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Subtract(BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Transform(Microsoft.Xna.Framework.Vector2@,BEPUutilities.Matrix2x2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Transpose(BEPUutilities.Matrix2x2@,BEPUutilities.Matrix2x2@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix2x2.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The matrix's determinant.</returns>
        </member>
        <member name="P:BEPUutilities.Matrix2x2.Identity">
            <summary>
            Gets the 2x2 identity matrix.
            </summary>
        </member>
        <member name="T:BEPUutilities.Matrix2x3">
            <summary>
            2 row, 3 column matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix2x3.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix2x3.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix2x3.M13">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix2x3.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix2x3.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix2x3.M23">
            <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUutilities.Matrix2x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 2 row, 2 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m13">Value at row 1, column 3 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
            <param name="m23">Value at row 2, column 3 of the matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x3.Add(BEPUutilities.Matrix2x3@,BEPUutilities.Matrix2x3@,BEPUutilities.Matrix2x3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x3.Multiply(BEPUutilities.Matrix2x3@,BEPUutilities.Matrix3x3@,BEPUutilities.Matrix2x3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x3.Multiply(BEPUutilities.Matrix2x3@,Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix2x3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x3.Negate(BEPUutilities.Matrix2x3@,BEPUutilities.Matrix2x3@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x3.Subtract(BEPUutilities.Matrix2x3@,BEPUutilities.Matrix2x3@,BEPUutilities.Matrix2x3@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x3.Transform(Microsoft.Xna.Framework.Vector2@,BEPUutilities.Matrix2x3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a row vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Row vector product of the transformation.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x3.Transform(Microsoft.Xna.Framework.Vector3@,BEPUutilities.Matrix2x3@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a column vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Column vector product of the transformation.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x3.Transpose(BEPUutilities.Matrix2x3@,BEPUutilities.Matrix3x2@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix2x3.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="T:BEPUutilities.Matrix3x2">
            <summary>
            3 row, 2 column matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x2.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x2.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x2.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x2.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x2.M31">
            <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x2.M32">
            <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUutilities.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 3 row, 2 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
            <param name="m31">Value at row 2, column 1 of the matrix.</param>
            <param name="m32">Value at row 2, column 2 of the matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x2.Add(BEPUutilities.Matrix3x2@,BEPUutilities.Matrix3x2@,BEPUutilities.Matrix3x2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x2.Multiply(BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x2@,BEPUutilities.Matrix3x2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x2.Multiply(Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix3x2@,BEPUutilities.Matrix3x2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x2.Negate(BEPUutilities.Matrix3x2@,BEPUutilities.Matrix3x2@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x2.Subtract(BEPUutilities.Matrix3x2@,BEPUutilities.Matrix3x2@,BEPUutilities.Matrix3x2@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x2.Transform(Microsoft.Xna.Framework.Vector2@,BEPUutilities.Matrix3x2@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a column vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Column vector product of the transformation.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x2.Transform(Microsoft.Xna.Framework.Vector3@,BEPUutilities.Matrix3x2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a row vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Row vector product of the transformation.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x2.Transpose(BEPUutilities.Matrix3x2@,BEPUutilities.Matrix2x3@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x2.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="T:BEPUutilities.Matrix3x3">
            <summary>
            3 row, 3 column matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x3.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x3.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x3.M13">
            <summary>
            Value at row 1, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x3.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x3.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x3.M23">
            <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x3.M31">
            <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x3.M32">
            <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUutilities.Matrix3x3.M33">
            <summary>
            Value at row 3, column 3 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 3 row, 3 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m13">Value at row 1, column 3 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
            <param name="m23">Value at row 2, column 3 of the matrix.</param>
            <param name="m31">Value at row 3, column 1 of the matrix.</param>
            <param name="m32">Value at row 3, column 2 of the matrix.</param>
            <param name="m33">Value at row 3, column 3 of the matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Add(BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Add(Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Add(BEPUutilities.Matrix3x3@,Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix3x3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix3x3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateCrossProduct(Microsoft.Xna.Framework.Vector3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Creates a skew symmetric matrix M from vector A such that M * B for some other vector B is equivalent to the cross product of A and B.
            </summary>
            <param name="v">Vector to base the matrix on.</param>
            <param name="result">Skew-symmetric matrix result.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateFromMatrix(Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix3x3@)">
            <summary>
            Creates a 3x3 matrix from an XNA 4x4 matrix.
            </summary>
            <param name="matrix4X4">Matrix to extract a 3x3 matrix from.</param>
            <param name="matrix3X3">Upper 3x3 matrix extracted from the XNA matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateFromMatrix(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a 3x3 matrix from an XNA 4x4 matrix.
            </summary>
            <param name="matrix4X4">Matrix to extract a 3x3 matrix from.</param>
            <returns>Upper 3x3 matrix extracted from the XNA matrix.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateScale(System.Single,BEPUutilities.Matrix3x3@)">
            <summary>
            Constructs a uniform scaling matrix.
            </summary>
            <param name="scale">Value to use in the diagonal.</param>
            <param name="matrix">Scaling matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateScale(System.Single)">
            <summary>
            Constructs a uniform scaling matrix.
            </summary>
            <param name="scale">Value to use in the diagonal.</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateScale(Microsoft.Xna.Framework.Vector3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
            <param name="scale">Values defining the axis scales.</param>
            <param name="matrix">Scaling matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateScale(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
            <param name="scale">Values defining the axis scales.</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateScale(System.Single,System.Single,System.Single,BEPUutilities.Matrix3x3@)">
            <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
            <param name="x">Scaling along the x axis.</param>
            <param name="y">Scaling along the y axis.</param>
            <param name="z">Scaling along the z axis.</param>
            <param name="matrix">Scaling matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
            <param name="x">Scaling along the x axis.</param>
            <param name="y">Scaling along the y axis.</param>
            <param name="z">Scaling along the z axis.</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Invert(BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Inverts the given matix.
            </summary>
            <param name="matrix">Matrix to be inverted.</param>
            <param name="result">Inverted matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.AdaptiveInvert(BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Inverts the largest nonsingular submatrix in the matrix, excluding 2x2's that involve M13 or M31, and excluding 1x1's that include nondiagonal elements.
            </summary>
            <param name="matrix">Matrix to be inverted.</param>
            <param name="result">Inverted matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.op_Multiply(BEPUutilities.Matrix3x3,BEPUutilities.Matrix3x3)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.op_Multiply(BEPUutilities.Matrix3x3,System.Single)">
            <summary>
            Scales all components of the matrix by the given value.
            </summary>
            <param name="m">First matrix to multiply.</param>
            <param name="f">Scaling value to apply to all components of the matrix.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.op_Multiply(System.Single,BEPUutilities.Matrix3x3)">
            <summary>
            Scales all components of the matrix by the given value.
            </summary>
            <param name="m">First matrix to multiply.</param>
            <param name="f">Scaling value to apply to all components of the matrix.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Multiply(BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Multiply(BEPUutilities.Matrix3x3@,Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix3x3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Multiply(Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.MultiplyTransposed(BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Multiplies a transposed matrix with another matrix.
            </summary>
            <param name="matrix">Matrix to be multiplied.</param>
            <param name="transpose">Matrix to be transposed and multiplied.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.MultiplyByTransposed(BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Multiplies a matrix with a transposed matrix.
            </summary>
            <param name="matrix">Matrix to be multiplied.</param>
            <param name="transpose">Matrix to be transposed and multiplied.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Multiply(BEPUutilities.Matrix3x3@,System.Single,BEPUutilities.Matrix3x3@)">
            <summary>
            Scales all components of the matrix.
            </summary>
            <param name="matrix">Matrix to scale.</param>
            <param name="scale">Amount to scale.</param>
            <param name="result">Scaled matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Negate(BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Subtract(BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.ToMatrix4X4(BEPUutilities.Matrix3x3@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <param name="b">Created 4x4 matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.ToMatrix4X4(BEPUutilities.Matrix3x3)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <returns>Created 4x4 matrix.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Transform(Microsoft.Xna.Framework.Vector3,BEPUutilities.Matrix3x3)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <returns>Product of the transformation.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Transform(Microsoft.Xna.Framework.Vector3@,BEPUutilities.Matrix3x3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.TransformTranspose(Microsoft.Xna.Framework.Vector3,BEPUutilities.Matrix3x3)">
            <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation transpose.</param>
            <returns>Product of the transformation.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.TransformTranspose(Microsoft.Xna.Framework.Vector3@,BEPUutilities.Matrix3x3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation transpose.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.TransformTranspose(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation transpose.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Transpose(BEPUutilities.Matrix3x3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Transpose(Microsoft.Xna.Framework.Matrix@,BEPUutilities.Matrix3x3@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The matrix's determinant.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.AdaptiveDeterminant(System.Int32@)">
            <summary>
            Calculates the determinant of largest nonsingular submatrix, excluding 2x2's that involve M13 or M31, and excluding all 1x1's that involve nondiagonal elements.
            </summary>
            <param name="subMatrixCode">Represents the submatrix that was used to compute the determinant.
            0 is the full 3x3.  1 is the upper left 2x2.  2 is the lower right 2x2.  3 is the four corners.
            4 is M11.  5 is M22.  6 is M33.</param>
            <returns>The matrix's determinant.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateQuaternion(BEPUutilities.Matrix3x3@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Constructs a quaternion from a 3x3 rotation matrix.
            </summary>
            <param name="r">Rotation matrix to create the quaternion from.</param>
            <param name="q">Quaternion based on the rotation matrix.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateQuaternion(BEPUutilities.Matrix3x3)">
            <summary>
            Constructs a quaternion from a 3x3 rotation matrix.
            </summary>
            <param name="r">Rotation matrix to create the quaternion from.</param>
            <returns>Quaternion based on the rotation matrix.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion@,BEPUutilities.Matrix3x3@)">
            <summary>
            Creates a 3x3 matrix representing the orientation stored in the quaternion.
            </summary>
            <param name="quaternion">Quaternion to use to create a matrix.</param>
            <param name="result">Matrix representing the quaternion's orientation.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a 3x3 matrix representing the orientation stored in the quaternion.
            </summary>
            <param name="quaternion">Quaternion to use to create a matrix.</param>
            <returns>Matrix representing the quaternion's orientation.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateOuterProduct(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUutilities.Matrix3x3@)">
            <summary>
            Computes the outer product of the given vectors.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <param name="result">Outer product result.</param>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Creates a matrix representing a rotation of a given angle around a given axis.
            </summary>
            <param name="axis">Axis around which to rotate.</param>
            <param name="angle">Amount to rotate.</param>
            <returns>Matrix representing the rotation.</returns>
        </member>
        <member name="M:BEPUutilities.Matrix3x3.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,BEPUutilities.Matrix3x3@)">
            <summary>
            Creates a matrix representing a rotation of a given angle around a given axis.
            </summary>
            <param name="axis">Axis around which to rotate.</param>
            <param name="angle">Amount to rotate.</param>
            <param name="result">Matrix representing the rotation.</param>
        </member>
        <member name="P:BEPUutilities.Matrix3x3.Identity">
            <summary>
            Gets the 3x3 identity matrix.
            </summary>
        </member>
        <member name="P:BEPUutilities.Matrix3x3.Backward">
            <summary>
            Gets or sets the backward vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUutilities.Matrix3x3.Down">
            <summary>
            Gets or sets the down vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUutilities.Matrix3x3.Forward">
            <summary>
            Gets or sets the forward vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUutilities.Matrix3x3.Left">
            <summary>
            Gets or sets the left vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUutilities.Matrix3x3.Right">
            <summary>
            Gets or sets the right vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUutilities.Matrix3x3.Up">
            <summary>
            Gets or sets the up vector of the matrix.
            </summary>
        </member>
        <member name="T:BEPUutilities.RayHit">
            <summary>
             Contains ray hit data.
            </summary>
        </member>
        <member name="F:BEPUutilities.RayHit.Location">
            <summary>
             Location of the ray hit.
            </summary>
        </member>
        <member name="F:BEPUutilities.RayHit.Normal">
            <summary>
             Normal of the ray hit.
            </summary>
        </member>
        <member name="F:BEPUutilities.RayHit.T">
            <summary>
             T parameter of the ray hit.  
             The ray hit location is equal to the ray origin added to the ray direction multiplied by T.
            </summary>
        </member>
        <member name="T:BEPUutilities.ResourceManagement.CommonResources">
            <summary>
            Handles allocation and management of commonly used resources.
            </summary>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.CommonResources.GetRayHitList">
            <summary>
            Retrieves a ray hit list from the resource pool.
            </summary>
            <returns>Empty ray hit list.</returns>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.CommonResources.GiveBack(BEPUutilities.DataStructures.RawList{BEPUutilities.RayHit})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.CommonResources.GetIntList">
            <summary>
            Retrieves a int list from the resource pool.
            </summary>
            <returns>Empty int list.</returns>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.CommonResources.GiveBack(BEPUutilities.DataStructures.RawList{System.Int32})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.CommonResources.GetIntSet">
            <summary>
            Retrieves a int hash set from the resource pool.
            </summary>
            <returns>Empty int set.</returns>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.CommonResources.GiveBack(System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="set">Set to return.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.CommonResources.GetFloatList">
            <summary>
            Retrieves a float list from the resource pool.
            </summary>
            <returns>Empty float list.</returns>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.CommonResources.GiveBack(BEPUutilities.DataStructures.RawList{System.Single})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.CommonResources.GetVectorList">
            <summary>
            Retrieves a Vector3 list from the resource pool.
            </summary>
            <returns>Empty Vector3 list.</returns>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.CommonResources.GiveBack(BEPUutilities.DataStructures.RawList{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="T:BEPUutilities.ResourceManagement.LockingResourcePool`1">
            <summary>
            Uses a spinlock to safely access resources.
            </summary>
            <typeparam name="T">Type of object to store in the pool.</typeparam>
        </member>
        <member name="T:BEPUutilities.ResourceManagement.ResourcePool`1">
            <summary>
            Manages a cache of a type of resource.
            </summary>
            <typeparam name="T">Type of object to pool.</typeparam>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.ResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.ResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.ResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.ResourcePool`1.CreateNewResource">
            <summary>
            Creates and returns a new resource.
            </summary>
            <returns>New resource.</returns>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.ResourcePool`1.Clear">
            <summary>
            Removes all elements from the pool.
            </summary>
        </member>
        <member name="P:BEPUutilities.ResourceManagement.ResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="P:BEPUutilities.ResourceManagement.ResourcePool`1.InstanceInitializer">
            <summary>
            Gets or sets the function that configures new instances.
            This is only called once per object created for the resource pool.
            </summary>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.LockingResourcePool`1.#ctor(System.Int32,System.Action{`0})">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
            <param name="initializer">Function to initialize new instances in the resource pool with.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.LockingResourcePool`1.#ctor(System.Int32)">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.LockingResourcePool`1.#ctor">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.LockingResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.LockingResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.LockingResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.LockingResourcePool`1.Clear">
            <summary>
            Clears out the resource pool.
            </summary>
        </member>
        <member name="P:BEPUutilities.ResourceManagement.LockingResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="T:BEPUutilities.ResourceManagement.UnsafeResourcePool`1">
            <summary>
            Manages a resource type, but performs no locking to handle asynchronous access.
            </summary>
            <typeparam name="T">Type of object to store in the pool.</typeparam>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.UnsafeResourcePool`1.#ctor(System.Int32,System.Action{`0})">
            <summary>
            Constructs a new locking resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
            <param name="initializer">Function to initialize new instances in the resource pool with.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.UnsafeResourcePool`1.#ctor(System.Int32)">
            <summary>
            Constructs a new locking resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.UnsafeResourcePool`1.#ctor">
            <summary>
            Constructs a new locking resource pool.
            </summary>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.UnsafeResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.UnsafeResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.UnsafeResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="M:BEPUutilities.ResourceManagement.UnsafeResourcePool`1.Clear">
            <summary>
            Clears out the resource pool.
            </summary>
        </member>
        <member name="P:BEPUutilities.ResourceManagement.UnsafeResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="T:BEPUutilities.RigidTransform">
            <summary>
             Transform composed of a rotation and translation.
            </summary>
        </member>
        <member name="F:BEPUutilities.RigidTransform.Position">
            <summary>
             Translation component of the transform.
            </summary>
        </member>
        <member name="F:BEPUutilities.RigidTransform.Orientation">
            <summary>
             Rotation component of the transform.
            </summary>
        </member>
        <member name="M:BEPUutilities.RigidTransform.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
            <summary>
             Constructs a new rigid transform.
            </summary>
            <param name="position">Translation component of the transform.</param>
            <param name="orienation">Rotation component of the transform.</param>
        </member>
        <member name="M:BEPUutilities.RigidTransform.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
             Constructs a new rigid transform.
            </summary>
            <param name="position">Translation component of the transform.</param>
        </member>
        <member name="M:BEPUutilities.RigidTransform.#ctor(Microsoft.Xna.Framework.Quaternion)">
            <summary>
             Constructs a new rigid transform.
            </summary>
            <param name="orienation">Rotation component of the transform.</param>
        </member>
        <member name="M:BEPUutilities.RigidTransform.Invert(BEPUutilities.RigidTransform@,BEPUutilities.RigidTransform@)">
            <summary>
            Inverts a rigid transform.
            </summary>
            <param name="transform">Transform to invert.</param>
            <param name="inverse">Inverse of the transform.</param>
        </member>
        <member name="M:BEPUutilities.RigidTransform.Transform(BEPUutilities.RigidTransform@,BEPUutilities.RigidTransform@,BEPUutilities.RigidTransform@)">
            <summary>
             Transforms a rigid transform by another rigid transform.
            </summary>
            <param name="a">The first, "local" rigid transform.</param>
            <param name="b">The second, "world" rigid transform.</param>
            <param name="combined">Combined rigid transform.</param>
        </member>
        <member name="M:BEPUutilities.RigidTransform.TransformByInverse(BEPUutilities.RigidTransform@,BEPUutilities.RigidTransform@,BEPUutilities.RigidTransform@)">
            <summary>
             Transforms a rigid transform by another rigid transform's inverse.
            </summary>
            <param name="a">The first rigid transform.</param>
            <param name="b">The second rigid transform, to be inverted.</param>
            <param name="combinedTransform">Combined rigid transform.</param>
        </member>
        <member name="M:BEPUutilities.RigidTransform.Transform(Microsoft.Xna.Framework.Vector3@,BEPUutilities.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
             Transforms a position by a rigid transform.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to apply.</param>
            <param name="result">Transformed position.</param>
        </member>
        <member name="M:BEPUutilities.RigidTransform.TransformByInverse(Microsoft.Xna.Framework.Vector3@,BEPUutilities.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
             Transforms a position by a rigid transform's inverse.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to invert and apply.</param>
            <param name="result">Transformed position.</param>
        </member>
        <member name="P:BEPUutilities.RigidTransform.OrientationMatrix">
            <summary>
            Gets the orientation matrix created from the orientation of the rigid transform.
            </summary>
        </member>
        <member name="P:BEPUutilities.RigidTransform.Matrix">
            <summary>
             Gets the 4x4 matrix created from the rigid transform.
            </summary>
        </member>
        <member name="P:BEPUutilities.RigidTransform.Identity">
            <summary>
             Gets the identity rigid transform.
            </summary>
        </member>
        <member name="T:BEPUutilities.SpinLock">
            <summary>
            Synchronizes using a busy wait.  Take care when using this; if the critical section is long or there's any doubt about the use of a busy wait, consider using Monitor locks or other approaches instead.
            Replaces the .NET SpinLock on PC and provides its functionality on the Xbox360.
            </summary>
        </member>
        <member name="M:BEPUutilities.SpinLock.Enter">
            <summary>
            Enters the critical section.  A thread cannot attempt to enter the spinlock if it already owns the spinlock.
            </summary>
        </member>
        <member name="M:BEPUutilities.SpinLock.TryEnter">
            <summary>
            Attempts to enters the critical section.  A thread cannot attempt to enter the spinlock if it already owns the spinlock.
            </summary>
        </member>
        <member name="M:BEPUutilities.SpinLock.Exit">
            <summary>
            Exits the critical section.  This can only be safely called from the same
            thread of execution after a corresponding Enter.
            </summary>
        </member>
        <member name="T:BEPUutilities.Toolbox">
            <summary>
            Helper class with many algorithms for intersection testing and 3D math.
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.BigEpsilon">
            <summary>
            Large tolerance value. Defaults to 1e-5f.
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.Epsilon">
            <summary>
            Tolerance value. Defaults to 1e-7f.
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.NoVector">
            <summary>
            Represents an invalid Vector3.
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.BackVector">
            <summary>
            Reference for a vector with dimensions (0,0,1).
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.DownVector">
            <summary>
            Reference for a vector with dimensions (0,-1,0).
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.ForwardVector">
            <summary>
            Reference for a vector with dimensions (0,0,-1).
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.IdentityOrientation">
            <summary>
            Refers to the identity quaternion.
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.LeftVector">
            <summary>
            Reference for a vector with dimensions (-1,0,0).
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.RightVector">
            <summary>
            Reference for a vector with dimensions (1,0,0).
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.UpVector">
            <summary>
            Reference for a vector with dimensions (0,1,0).
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.ZeroMatrix">
            <summary>
            Matrix containing zeroes for every element.
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.ZeroVector">
            <summary>
            Reference for a vector with dimensions (0,0,0).
            </summary>
        </member>
        <member name="F:BEPUutilities.Toolbox.RigidIdentity">
            <summary>
            Refers to the rigid identity transformation.
            </summary>
        </member>
        <member name="M:BEPUutilities.Toolbox.FindRayTriangleIntersection(Microsoft.Xna.Framework.Ray@,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Boolean@,BEPUutilities.RayHit@)">
            <summary>
            Determines the intersection between a ray and a triangle.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length to travel in units of the direction's length.</param>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
            <param name="hitClockwise">True if the the triangle was hit on the clockwise face, false otherwise.</param>
            <param name="hit">Hit data of the ray, if any</param>
            <returns>Whether or not the ray and triangle intersect.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.FindRayTriangleIntersection(Microsoft.Xna.Framework.Ray@,System.Single,BEPUutilities.TriangleSidedness,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUutilities.RayHit@)">
            <summary>
            Determines the intersection between a ray and a triangle.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length to travel in units of the direction's length.</param>
            <param name="sidedness">Sidedness of the triangle to test.</param>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
            <param name="hit">Hit data of the ray, if any</param>
            <returns>Whether or not the ray and triangle intersect.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetSegmentPlaneIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane defined by three points.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="d">First vertex of a triangle which lies on the plane.</param>
            <param name="e">Second vertex of a triangle which lies on the plane.</param>
            <param name="f">Third vertex of a triangle which lies on the plane.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetSegmentPlaneIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second enpoint of segment.</param>
            <param name="p">Plane for comparison.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetSegmentPlaneIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Plane for comparison.</param>
            <param name="t">Interval along segment to intersection.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetLinePlaneIntersection(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Plane@,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the intersection between the given line and the given plane.
            </summary>
            <param name="a">First endpoint of segment defining the line.</param>
            <param name="b">Second endpoint of segment defining the line.</param>
            <param name="p">Plane for comparison.</param>
            <param name="t">Interval along line to intersection (A + t * AB).</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the line intersects the plane.  If false, the line is parallel to the plane's surface.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetRayPlaneIntersection(Microsoft.Xna.Framework.Ray@,Microsoft.Xna.Framework.Plane@,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the intersection between the given ray and the given plane.
            </summary>
            <param name="ray">Ray to test against the plane.</param>
            <param name="p">Plane for comparison.</param>
            <param name="t">Interval along line to intersection (A + t * AB).</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the line intersects the plane.  If false, the line is parallel to the plane's surface.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointOnTriangleToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p.
            </summary>
            <param name="a">First vertex of triangle.</param>
            <param name="b">Second vertex of triangle.</param>
            <param name="c">Third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
            <returns>Voronoi region containing the closest point.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointOnTriangleToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUutilities.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p and provides the subsimplex whose voronoi region contains the point.
            </summary>
            <param name="a">First vertex of triangle.</param>
            <param name="b">Second vertex of triangle.</param>
            <param name="c">Third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointOnTriangleToPoint(BEPUutilities.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3@,BEPUutilities.DataStructures.RawList{System.Int32},BEPUutilities.DataStructures.RawList{System.Single},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p and provides the subsimplex whose voronoi region contains the point.
            </summary>
            <param name="q">Simplex containing triangle for testing.</param>
            <param name="i">Index of first vertex of triangle.</param>
            <param name="j">Index of second vertex of triangle.</param>
            <param name="k">Index of third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1, c = 2.</param>
            <param name="baryCoords">Barycentric coordinates of the point on the triangle.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.IsPointInsideTriangle(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if supplied point is within the triangle as defined by the provided vertices.
            </summary>
            <param name="vA">A vertex of the triangle.</param>
            <param name="vB">A vertex of the triangle.</param>
            <param name="vC">A vertex of the triangle.</param>
            <param name="p">The point for comparison against the triangle.</param>
            <returns>Whether or not the point is within the triangle.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.IsPointInsideTriangle(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Determines if supplied point is within the triangle as defined by the provided vertices.
            </summary>
            <param name="vA">A vertex of the triangle.</param>
            <param name="vB">A vertex of the triangle.</param>
            <param name="vC">A vertex of the triangle.</param>
            <param name="p">The point for comparison against the triangle.</param>
            <param name="margin">Extra area on the edges of the triangle to include.  Can be negative.</param>
            <returns>Whether or not the point is within the triangle.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointOnSegmentToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointOnSegmentToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointOnSegmentToPoint(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Single},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="q">List of points in the containing simplex.</param>
            <param name="i">Index of first endpoint of segment.</param>
            <param name="j">Index of second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1.</param>
            <param name="baryCoords">Barycentric coordinates of the point.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetSquaredDistanceFromPointToLine(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the shortest squared distance from the point to the line.
            </summary>
            <param name="p">Point to check against the line.</param>
            <param name="a">First point on the line.</param>
            <param name="b">Second point on the line.</param>
            <returns>Shortest squared distance from the point to the line.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointsBetweenSegments(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointsBetweenSegments(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,System.Single@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="s">Distance along the line to the point for first segment.</param>
            <param name="t">Distance along the line to the point for second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointsBetweenLines(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,System.Single@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen lines p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="s">Distance along the line to the point for first segment.</param>
            <param name="t">Distance along the line to the point for second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.ArePointsOnOppositeSidesOfPlane(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if vectors o and p are on opposite sides of the plane defined by a, b, and c.
            </summary>
            <param name="o">First point for comparison.</param>
            <param name="p">Second point for comparison.</param>
            <param name="a">First vertex of the plane.</param>
            <param name="b">Second vertex of plane.</param>
            <param name="c">Third vertex of plane.</param>
            <returns>Whether or not vectors o and p reside on opposite sides of the plane.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetDistancePointToPlane(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the distance between a point and a plane..
            </summary>
            <param name="point">Point to project onto plane.</param>
            <param name="normal">Normal of the plane.</param>
            <param name="pointOnPlane">Point located on the plane.</param>
            <returns>Distance from the point to the plane.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetPointProjectedOnPlane(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the location of the point when projected onto the plane defined by the normal and a point on the plane.
            </summary>
            <param name="point">Point to project onto plane.</param>
            <param name="normal">Normal of the plane.</param>
            <param name="pointOnPlane">Point located on the plane.</param>
            <param name="projectedPoint">Projected location of point onto plane.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.IsPointWithinFaceExtrusion(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.List{Microsoft.Xna.Framework.Plane},Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines if a point is within a set of planes defined by the edges of a triangle.
            </summary>
            <param name="point">Point for comparison.</param>
            <param name="planes">Edge planes.</param>
            <param name="centroid">A point known to be inside of the planes.</param>
            <returns>Whether or not the point is within the edge planes.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointOnTetrahedronToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="a">First vertex of the tetrahedron.</param>
            <param name="b">Second vertex of the tetrahedron.</param>
            <param name="c">Third vertex of the tetrahedron.</param>
            <param name="d">Fourth vertex of the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointOnTetrahedronToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUutilities.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="a">First vertex of the tetrahedron.</param>
            <param name="b">Second vertex of the tetrahedron.</param>
            <param name="c">Third vertex of the tetrahedron.</param>
            <param name="d">Fourth vertex of the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetClosestPointOnTetrahedronToPoint(BEPUutilities.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@,BEPUutilities.DataStructures.RawList{System.Int32},BEPUutilities.DataStructures.RawList{System.Single},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="tetrahedron">List of 4 points composing the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1, c = 2, d = 3.</param>
            <param name="baryCoords">Barycentric coordinates of p on the tetrahedron.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.RayCastSphere(Microsoft.Xna.Framework.Ray@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,BEPUutilities.RayHit@)">
            <summary>
             Tests a ray against a sphere.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="spherePosition">Position of the sphere.</param>
            <param name="radius">Radius of the sphere.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="hit">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hits the sphere.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetVelocityOfPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Computes the velocity of a point as if it were attached to an object with the given center and velocity.
            </summary>
            <param name="point">Point to compute the velocity of.</param>
            <param name="center">Center of the object to which the point is attached.</param>
            <param name="linearVelocity">Linear velocity of the object.</param>
            <param name="angularVelocity">Angular velocity of the object.</param>
            <param name="velocity">Velocity of the point.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetVelocityOfPoint(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Computes the velocity of a point as if it were attached to an object with the given center and velocity.
            </summary>
            <param name="point">Point to compute the velocity of.</param>
            <param name="center">Center of the object to which the point is attached.</param>
            <param name="linearVelocity">Linear velocity of the object.</param>
            <param name="angularVelocity">Angular velocity of the object.</param>
            <returns>Velocity of the point.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.ExpandBoundingBox(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Expands a bounding box by the given sweep.
            </summary>
            <param name="boundingBox">Bounding box to expand.</param>
            <param name="sweep">Sweep to expand the bounding box with.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetTriangleBoundingBox(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.BoundingBox@)">
            <summary>
            Computes the bounding box of three points.
            </summary>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
            <param name="aabb">Bounding box of the triangle.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetAngleFromQuaternion(Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Computes the angle change represented by a normalized quaternion.
            </summary>
            <param name="q">Quaternion to be converted.</param>
            <returns>Angle around the axis represented by the quaternion.</returns>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetAxisAngleFromQuaternion(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Computes the axis angle representation of a normalized quaternion.
            </summary>
            <param name="q">Quaternion to be converted.</param>
            <param name="axis">Axis represented by the quaternion.</param>
            <param name="angle">Angle around the axis represented by the quaternion.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetQuaternionBetweenNormalizedVectors(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Computes the quaternion rotation between two normalized vectors.
            </summary>
            <param name="v1">First unit-length vector.</param>
            <param name="v2">Second unit-length vector.</param>
            <param name="q">Quaternion representing the rotation from v1 to v2.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.UpdateOrientationRK4(Microsoft.Xna.Framework.Quaternion@,BEPUutilities.Matrix3x3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Updates the quaternion using RK4 integration.
            </summary>
            <param name="q">Quaternion to update.</param>
            <param name="localInertiaTensorInverse">Local-space inertia tensor of the object being updated.</param>
            <param name="angularMomentum">Angular momentum of the object.</param>
            <param name="dt">Time since last frame, in seconds.</param>
            <param name="newOrientation">New orientation quaternion.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.DifferentiateQuaternion(Microsoft.Xna.Framework.Quaternion@,BEPUutilities.Matrix3x3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Finds the change in the rotation state quaternion provided the local inertia tensor and angular velocity.
            </summary>
            <param name="orientation">Orienatation of the object.</param>
            <param name="localInertiaTensorInverse">Local-space inertia tensor of the object being updated.</param>
            <param name="angularMomentum">Angular momentum of the object.</param>
             <param name="orientationChange">Change in quaternion.</param>
        </member>
        <member name="M:BEPUutilities.Toolbox.GetBarycentricCoordinates(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the barycentric coordinates of the point with respect to a triangle's vertices.
            </summary>
            <param name="p">Point to compute the barycentric coordinates of.</param>
            <param name="a">First vertex in the triangle.</param>
            <param name="b">Second vertex in the triangle.</param>
            <param name="c">Third vertex in the triangle.</param>
            <param name="aWeight">Weight of the first vertex.</param>
            <param name="bWeight">Weight of the second vertex.</param>
            <param name="cWeight">Weight of the third vertex.</param>
        </member>
        <member name="T:BEPUutilities.TriangleSidedness">
            <summary>
             Sidedness of a triangle or mesh.
             A triangle can be double sided, or allow one of its sides to let interacting objects through.
            </summary>
        </member>
        <member name="F:BEPUutilities.TriangleSidedness.DoubleSided">
            <summary>
            The triangle will interact with objects coming from both directions.
            </summary>
        </member>
        <member name="F:BEPUutilities.TriangleSidedness.Clockwise">
            <summary>
            The triangle will interact with objects from which the winding of the triangle appears to be clockwise.
            </summary>
        </member>
        <member name="F:BEPUutilities.TriangleSidedness.Counterclockwise">
            <summary>
            The triangle will interact with objects from which the winding of the triangle appears to be counterclockwise..
            </summary>
        </member>
    </members>
</doc>
